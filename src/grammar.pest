WS   = _{ " " | "\t" }
NL   = _{ "\n" | "\r\n" }
WSNL = _{ WS | NL }

procedure_identifier =  { identifier }
interface_identifier =  { identifier }
variable_identifier  =  { identifier }
identifier           = @{ (ASCII_ALPHA_LOWER) ~ (ASCII_ALPHANUMERIC | "_")* }
type_name            = @{ (ASCII_ALPHA_UPPER) ~ (ASCII_ALPHANUMERIC)+ }

argument_list =  { expression ~ (WS* ~ "," ~ WS* ~ expression)* }
expression    =  { literal }
literal       = _{ string | number | boolean | null }
string        = @{ "\"" ~ (string_char)* ~ "\"" }
string_char   = _{ "\\\"" | !"\"" ~ ANY }
number        = @{ "-"? ~ (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* | "." ~ ASCII_DIGIT+ | ASCII_DIGIT+) }
boolean       =  { "true" | "false" }
null          =  { "null" }

src                = { WSNL* ~ program ~ WSNL* ~ EOI }
program            = { "program" ~ WS* ~ do_block }
do_block           = { "do" ~ WS* ~ NL ~ (WS* ~ statement ~ WS* ~ NL)* ~ WS* ~ "end" }
statement          = { procedure_call | return_stmt | variable_statement }
procedure_call     = { (interface_identifier ~ ":")? ~ procedure_identifier ~ "(" ~ WS* ~ argument_list? ~ WS* ~ ")" }
return_stmt        = { "return" ~ expression? }
variable_statement = { memory_modifier ~ WS+ ~ variable_identifier ~ WS* ~ (":" ~ type_name)? ~ (("=" | "->") ~ expression)? }
memory_modifier    = { "dim" | "ref" | "var" | "addr" }
